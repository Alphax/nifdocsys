/* Copyright (c) 2007, NIF File Format Library and Tools
All rights reserved.  Please see niflib.i for licence. */

//---THIS FILE WAS AUTOMATICALLY GENERATED.  DO NOT EDIT---//

/*
To change this file, alter the 
niftools/docsys/templates/swig_niobject.i.template template file,
and then run the niftools/docsys/nifxml_swig.py Python script.
*/

%module {name}

%include "common.i"

//Import symbols from these files but don't wrap them in this module since they're part of pyniflib
%import "Key.h"
%import "Ref.h"
%import "Type.h"
%import "niflib.h"
%import "nif_versions.h"
%import "nif_math.h"

//Import Ancestors
{import_ancestors}

//Include this object
%include "obj/{name}.h"

// wrap smart pointer {name}Ref
%template({name}Ref) Niflib::Ref<Niflib::{name}>;

//Replace standard __getattr__ call so that the dot operator redirects to the stored {name}.
%pythoncode %{
def new_get(self, name):
	try:
		return _swig_getattr(self, {name}Ref, name)
	except AttributeError:
		if self.__call__():
			return getattr(self.__call__(), name)
		else:
			raise AttributeError
		
{name}Ref.__getattr__ = new_get 
%}

// Function to create a new {name} object
%{
Niflib::{name}Ref New{name}() {
  return Niflib::{name}Ref(new Niflib::{name});
}
%}
// now wrap it
Niflib::{name}Ref New{name}();

// template function to cast another type of NiObject to a {name}Ref
%template(CastTo{name}) Niflib::DynamicCast<Niflib::{name}>;

